<?php declare(strict_types=1);

namespace App\Module\Front;

use App\Model\Database\EntityManager;
use App\Model\User\Auth\UserIdentity;
use App\Model\User\User;
use Nette\Application\Response;
use Nette\Application\UI\Presenter;
use Nette\DI\Attributes\Inject;
use Nette\Http\IResponse;

/**
 * @property BaseFrontTemplate $template
 */
class BaseFrontPresenter extends Presenter
{

  #[Inject]
  public EntityManager $em;

  /**
   * Arrays that should be re-rendered. This can be customized
   * in the descendant presenters.
   *
   * @var string[]
   */
  public array $redraws = [
    "title",
    "content"
  ];

  public array $toBeRedrawn = [];

  protected function startup()
  {
    foreach ($this->redraws as $redraw) {
      $this->redrawControl($redraw);
    }

    parent::startup();
  }

  protected function beforeRender()
  {
    parent::beforeRender();
    $this->template->loggedUser = $this->getLoggedUser();
    $this->template->userIdentity = $this->getUserIdentity();
    $this->template->user = $this->getUser();
    $this->template->presenter = $this;
  }

  protected function shutdown(Response $response)
  {
    /**
     * Flush all persisted changes to the database.
     */
    $this->em->flush();

    parent::shutdown($response);
  }

  public function getUserIdentity(): ?UserIdentity
  {
    $identity = $this->getUser()->getIdentity();

    if (!$identity) {
      return null;
    }

    assert($identity instanceof UserIdentity);

    return $identity;
  }

  public function getLoggedUser(): ?User
  {
    $identity = $this->getUserIdentity();

    return $identity?->getUser();

  }

  public function getLoggedUserOrFail(): User
  {
    $user = $this->getLoggedUser();

    if (!$user) {
      $this->error(httpCode: IResponse::S401_UNAUTHORIZED);
    }

    return $user;
  }

  public function redrawControl(?string $snippet = null, bool $redraw = true): void
  {
    if ($redraw && $snippet) {
      $this->toBeRedrawn[] = $snippet;
    }
    parent::redrawControl($snippet, $redraw); // TODO: Change the autogenerated stub
  }

  /**
   * Only redraws one single control without redrawing others.
   *
   * @param string $snippet
   * @return void
   */
  public function redrawSingleControl(string $snippet): void
  {
    foreach ($this->toBeRedrawn as $control) {
      $this->redrawControl($control, false);
    }

    $this->redrawControl($snippet);
  }

}
